From 0990661c41d88c8d0645f58db4fcd7287860c5f2 Mon Sep 17 00:00:00 2001
From: Serhey Popovych <serhe.popovych@gmail.com>
Date: Tue, 28 Feb 2017 22:33:03 +0200
Subject: [PATCH 04/11] dev: Avoid infinite loop on network device index
 exhaustion

If network device indexes exhaust in namespace dev_new_index() can loop
indefinitely since there is no condition to exit except when free index
is found. However that never happens because RTNL is held.

Instead of retrying search for free ifindex starting from ifindex == 1
(LOOPBACK_IFINDEX) in dev_new_index() return invalid index value (0) as
result and handle it in callers.

Signed-off-by: Serhey Popovych <serhe.popovych@gmail.com>
---
 net/core/dev.c | 23 ++++++++++++++++-------
 1 file changed, 16 insertions(+), 7 deletions(-)

diff --git a/net/core/dev.c b/net/core/dev.c
index 71fd23a..8b7ffb5 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -9484,7 +9484,9 @@ int dev_change_xdp_fd(struct net_device *dev, struct netlink_ext_ack *extack,
  *	@net: the applicable net namespace
  *
  *	Returns a suitable unique value for a new device interface
- *	number.  The caller must hold the rtnl semaphore or the
+ *	number or zero in case of overrun.
+ *
+ *	The caller must hold the rtnl semaphore or the
  *	dev_base_lock to be sure it remains unique.
  */
 static int dev_new_index(struct net *net)
@@ -9493,7 +9495,7 @@ static int dev_new_index(struct net *net)
 
 	for (;;) {
 		if (++ifindex <= 0)
-			ifindex = 1;
+			return 0;
 		if (!__dev_get_by_index(net, ifindex))
 			return net->ifindex = ifindex;
 	}
@@ -9980,6 +9982,8 @@ int register_netdevice(struct net_device *dev)
 	ret = -EBUSY;
 	if (dev->ifindex <= 0) {
 		ifindex = dev_new_index(net);
+		if (!ifindex)
+			goto err_uninit;
 		dev->ifindex = ifindex;
 	} else if (__dev_get_by_index(net, dev->ifindex))
 		goto err_uninit;
@@ -10847,6 +10851,16 @@ int dev_change_net_namespace(struct net_device *dev, struct net *net, const char
 	if (net_eq(net_old, net))
 		goto out;
 
+	/* If there is an ifindex conflict assign a new one */
+	err = -EBUSY;
+	if (__dev_get_by_index(net, dev->ifindex)) {
+		new_ifindex = dev_new_index(net);
+		if (!new_ifindex)
+			goto out;
+	} else {
+		new_ifindex = dev->ifindex;
+	}
+
 	/* Pick the destination device name, and ensure
 	 * we can use it in the destination network namespace.
 	 */
@@ -10886,11 +10900,6 @@ int dev_change_net_namespace(struct net_device *dev, struct net *net, const char
 	rcu_barrier();
 
 	new_nsid = peernet2id_alloc(dev_net(dev), net, GFP_KERNEL);
-	/* If there is an ifindex conflict assign a new one */
-	if (__dev_get_by_index(net, dev->ifindex))
-		new_ifindex = dev_new_index(net);
-	else
-		new_ifindex = dev->ifindex;
 
 	rtmsg_ifinfo_newnet(RTM_DELLINK, dev, ~0U, GFP_KERNEL, &new_nsid,
 			    new_ifindex);
-- 
1.8.3.1

